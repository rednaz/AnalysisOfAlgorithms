PYTHON ALGORITHM
================

def k_edge_path(s, t, k):
    if k == 0:
        return s == t
    if k == 1:
        return s == t or (s, t) in edges
    for u in vertices:
        if k_edge_path(s, u, floor(k / 2)) and k_edge_path(u, t, ceil(k / 2)):
            return true
    return false


RECURSIVE OUTPUT
=================

R(1,1,16)
---------
R(1,1,3)
R(1,16,3)
R(1,16,4)
---------
T
R(1,16,3)
R(1,16,4)
---------
R(1,16,3)
R(1,16,4)
---------
R(1,1,2)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
T
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,1,1)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
T
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,1,0)
R(1,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
T
R(1,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
F
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,2,0)
R(2,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
T
R(2,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(2,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
F
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
R(1,3,0)
R(3,16,0)
R(1,16,1)
R(1,16,2)
R(1,16,3)
R(1,16,4)
---------
